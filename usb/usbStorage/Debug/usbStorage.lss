
usbStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000b3e  00000bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  00800068  00800068  00000bda  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000091  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00001358  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000164  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006d1  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002e6  00000000  00000000  00001c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a91  00000000  00000000  00001f13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000130  00000000  00000000  000029a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000259  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000086  00000000  00000000  00002d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	d8 c3       	rjmp	.+1968   	; 0x7c8 <__vector_11>
  18:	1e c4       	rjmp	.+2108   	; 0x856 <__vector_12>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ee e3       	ldi	r30, 0x3E	; 62
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a8 e6       	ldi	r26, 0x68	; 104
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 3a       	cpi	r26, 0xAE	; 174
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3b d5       	rcall	.+2678   	; 0xad0 <main>
  5a:	6f c5       	rjmp	.+2782   	; 0xb3a <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <twi_init>:
*/

#include "at24cxxx.h"

void twi_init(void)
{
  5e:	df 93       	push	r29
  60:	cf 93       	push	r28
  62:	cd b7       	in	r28, 0x3d	; 61
  64:	de b7       	in	r29, 0x3e	; 62
  /* set prescaler*/
  TWSR = TWI_PS;
  66:	81 e2       	ldi	r24, 0x21	; 33
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	fc 01       	movw	r30, r24
  6c:	10 82       	st	Z, r1

#if F_CPU < 3600000UL
  TWBR = 10; /* smallest TWBR value. */
  6e:	80 e2       	ldi	r24, 0x20	; 32
  70:	90 e0       	ldi	r25, 0x00	; 0
  72:	2a e0       	ldi	r18, 0x0A	; 10
  74:	fc 01       	movw	r30, r24
  76:	20 83       	st	Z, r18
#else
  TWBR = (F_CPU / 100000UL - 16) / 2;
#endif
}
  78:	cf 91       	pop	r28
  7a:	df 91       	pop	r29
  7c:	08 95       	ret

0000007e <ee24cxxx_write_page>:

/* page write, return nbyte which have sent, otherwise return -1*/
int ee24cxxx_write_page(uint16_t addr, int len, uint8_t *buf)
{
  7e:	df 93       	push	r29
  80:	cf 93       	push	r28
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	2a 97       	sbiw	r28, 0x0a	; 10
  88:	0f b6       	in	r0, 0x3f	; 63
  8a:	f8 94       	cli
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	0f be       	out	0x3f, r0	; 63
  90:	cd bf       	out	0x3d, r28	; 61
  92:	9e 83       	std	Y+6, r25	; 0x06
  94:	8d 83       	std	Y+5, r24	; 0x05
  96:	78 87       	std	Y+8, r23	; 0x08
  98:	6f 83       	std	Y+7, r22	; 0x07
  9a:	5a 87       	std	Y+10, r21	; 0x0a
  9c:	49 87       	std	Y+9, r20	; 0x09
  int rv=0; /* return value */
  9e:	1a 82       	std	Y+2, r1	; 0x02
  a0:	19 82       	std	Y+1, r1	; 0x01
  uint16_t endaddr;

  /*if the rest space of page is sufficient to store len byte*/
  if ((addr + len) <= (addr | (PAGE_SIZE - 1)))
  a2:	2f 81       	ldd	r18, Y+7	; 0x07
  a4:	38 85       	ldd	r19, Y+8	; 0x08
  a6:	8d 81       	ldd	r24, Y+5	; 0x05
  a8:	9e 81       	ldd	r25, Y+6	; 0x06
  aa:	28 0f       	add	r18, r24
  ac:	39 1f       	adc	r19, r25
  ae:	8d 81       	ldd	r24, Y+5	; 0x05
  b0:	9e 81       	ldd	r25, Y+6	; 0x06
  b2:	8f 63       	ori	r24, 0x3F	; 63
  b4:	82 17       	cp	r24, r18
  b6:	93 07       	cpc	r25, r19
  b8:	48 f0       	brcs	.+18     	; 0xcc <ee24cxxx_write_page+0x4e>
    endaddr = addr + len;
  ba:	8f 81       	ldd	r24, Y+7	; 0x07
  bc:	98 85       	ldd	r25, Y+8	; 0x08
  be:	2d 81       	ldd	r18, Y+5	; 0x05
  c0:	3e 81       	ldd	r19, Y+6	; 0x06
  c2:	82 0f       	add	r24, r18
  c4:	93 1f       	adc	r25, r19
  c6:	9c 83       	std	Y+4, r25	; 0x04
  c8:	8b 83       	std	Y+3, r24	; 0x03
  ca:	06 c0       	rjmp	.+12     	; 0xd8 <ee24cxxx_write_page+0x5a>
  /*else the rest space is deficient/insufficient/inadequate to store len byte*/
  else
    endaddr = (addr | (PAGE_SIZE - 1)) + 1;
  cc:	8d 81       	ldd	r24, Y+5	; 0x05
  ce:	9e 81       	ldd	r25, Y+6	; 0x06
  d0:	8f 63       	ori	r24, 0x3F	; 63
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	9c 83       	std	Y+4, r25	; 0x04
  d6:	8b 83       	std	Y+3, r24	; 0x03
  /*adjust len*/
  len = endaddr - addr;
  d8:	2b 81       	ldd	r18, Y+3	; 0x03
  da:	3c 81       	ldd	r19, Y+4	; 0x04
  dc:	8d 81       	ldd	r24, Y+5	; 0x05
  de:	9e 81       	ldd	r25, Y+6	; 0x06
  e0:	a9 01       	movw	r20, r18
  e2:	48 1b       	sub	r20, r24
  e4:	59 0b       	sbc	r21, r25
  e6:	ca 01       	movw	r24, r20
  e8:	98 87       	std	Y+8, r25	; 0x08
  ea:	8f 83       	std	Y+7, r24	; 0x07
  ec:	09 c0       	rjmp	.+18     	; 0x100 <ee24cxxx_write_page+0x82>
    {
    case TW_REP_START: /* OK, but should not happen */
    case TW_START:
      break;
    case TW_MT_ARB_LOST:
      goto begin;
  ee:	00 00       	nop
  f0:	07 c0       	rjmp	.+14     	; 0x100 <ee24cxxx_write_page+0x82>
  switch ((twst = TW_STATUS))
    {
    case TW_MT_SLA_ACK:
      break;
    case TW_MT_SLA_NACK: /* nack during select: device busy writing */
      goto begin;
  f2:	00 00       	nop
  f4:	05 c0       	rjmp	.+10     	; 0x100 <ee24cxxx_write_page+0x82>
    case TW_MT_ARB_LOST: /* re-arbitrate */
      goto begin;
  f6:	00 00       	nop
  f8:	03 c0       	rjmp	.+6      	; 0x100 <ee24cxxx_write_page+0x82>
    case TW_MT_DATA_ACK:
      break;
    case TW_MT_DATA_NACK:
      goto quit;
    case TW_MT_ARB_LOST:
      goto begin;
  fa:	00 00       	nop
  fc:	01 c0       	rjmp	.+2      	; 0x100 <ee24cxxx_write_page+0x82>
    case TW_MT_DATA_ACK:
      break;
    case TW_MT_DATA_NACK:
      goto quit;
    case TW_MT_ARB_LOST:
      goto begin;
  fe:	00 00       	nop
    endaddr = (addr | (PAGE_SIZE - 1)) + 1;
  /*adjust len*/
  len = endaddr - addr;

 begin:
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 100:	86 e5       	ldi	r24, 0x56	; 86
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	24 ea       	ldi	r18, 0xA4	; 164
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 10a:	00 00       	nop
 10c:	86 e5       	ldi	r24, 0x56	; 86
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	d4 f7       	brge	.-12     	; 0x10c <ee24cxxx_write_page+0x8e>
  switch ((twst = TW_STATUS))
 118:	81 e2       	ldi	r24, 0x21	; 33
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	fc 01       	movw	r30, r24
 11e:	80 81       	ld	r24, Z
 120:	88 7f       	andi	r24, 0xF8	; 248
 122:	80 93 ad 00 	sts	0x00AD, r24
 126:	80 91 ad 00 	lds	r24, 0x00AD
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	80 31       	cpi	r24, 0x10	; 16
 130:	91 05       	cpc	r25, r1
 132:	31 f0       	breq	.+12     	; 0x140 <ee24cxxx_write_page+0xc2>
 134:	88 33       	cpi	r24, 0x38	; 56
 136:	91 05       	cpc	r25, r1
 138:	d1 f2       	breq	.-76     	; 0xee <ee24cxxx_write_page+0x70>
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	91 05       	cpc	r25, r1
 13e:	59 f4       	brne	.+22     	; 0x156 <ee24cxxx_write_page+0xd8>
    default:
      return -1;
      /*do /not/ send stop condition becasue I have sent nothing.*/
    }
  
  TWDR = SLA_W_24CXXX;
 140:	83 e2       	ldi	r24, 0x23	; 35
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	20 ea       	ldi	r18, 0xA0	; 160
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 14a:	86 e5       	ldi	r24, 0x56	; 86
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	24 e8       	ldi	r18, 0x84	; 132
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 154:	03 c0       	rjmp	.+6      	; 0x15c <ee24cxxx_write_page+0xde>
    case TW_START:
      break;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      return -1;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	9f ef       	ldi	r25, 0xFF	; 255
 15a:	cd c0       	rjmp	.+410    	; 0x2f6 <ee24cxxx_write_page+0x278>
      /*do /not/ send stop condition becasue I have sent nothing.*/
    }
  
  TWDR = SLA_W_24CXXX;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 15c:	86 e5       	ldi	r24, 0x56	; 86
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	fc 01       	movw	r30, r24
 162:	80 81       	ld	r24, Z
 164:	88 23       	and	r24, r24
 166:	d4 f7       	brge	.-12     	; 0x15c <ee24cxxx_write_page+0xde>
  switch ((twst = TW_STATUS))
 168:	81 e2       	ldi	r24, 0x21	; 33
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	88 7f       	andi	r24, 0xF8	; 248
 172:	80 93 ad 00 	sts	0x00AD, r24
 176:	80 91 ad 00 	lds	r24, 0x00AD
 17a:	88 2f       	mov	r24, r24
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	80 32       	cpi	r24, 0x20	; 32
 180:	91 05       	cpc	r25, r1
 182:	09 f4       	brne	.+2      	; 0x186 <ee24cxxx_write_page+0x108>
 184:	b6 cf       	rjmp	.-148    	; 0xf2 <ee24cxxx_write_page+0x74>
 186:	88 33       	cpi	r24, 0x38	; 56
 188:	91 05       	cpc	r25, r1
 18a:	09 f4       	brne	.+2      	; 0x18e <ee24cxxx_write_page+0x110>
 18c:	b4 cf       	rjmp	.-152    	; 0xf6 <ee24cxxx_write_page+0x78>
 18e:	88 31       	cpi	r24, 0x18	; 24
 190:	91 05       	cpc	r25, r1
 192:	71 f4       	brne	.+28     	; 0x1b0 <ee24cxxx_write_page+0x132>
      goto begin;
    default:
      rv=-1;
      goto quit; /*must send stop condition*/
    }
  TWDR = addr>>8; /* first address word (high)*/
 194:	83 e2       	ldi	r24, 0x23	; 35
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	2d 81       	ldd	r18, Y+5	; 0x05
 19a:	3e 81       	ldd	r19, Y+6	; 0x06
 19c:	23 2f       	mov	r18, r19
 19e:	33 27       	eor	r19, r19
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 83       	st	Z, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 1a4:	86 e5       	ldi	r24, 0x56	; 86
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	24 e8       	ldi	r18, 0x84	; 132
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <ee24cxxx_write_page+0x13c>
    case TW_MT_SLA_NACK: /* nack during select: device busy writing */
      goto begin;
    case TW_MT_ARB_LOST: /* re-arbitrate */
      goto begin;
    default:
      rv=-1;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	89 83       	std	Y+1, r24	; 0x01
      goto quit; /*must send stop condition*/
 1b8:	97 c0       	rjmp	.+302    	; 0x2e8 <ee24cxxx_write_page+0x26a>
    }
  TWDR = addr>>8; /* first address word (high)*/
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 1ba:	86 e5       	ldi	r24, 0x56	; 86
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	fc 01       	movw	r30, r24
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	d4 f7       	brge	.-12     	; 0x1ba <ee24cxxx_write_page+0x13c>
  switch ((twst = TW_STATUS))
 1c6:	81 e2       	ldi	r24, 0x21	; 33
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	fc 01       	movw	r30, r24
 1cc:	80 81       	ld	r24, Z
 1ce:	88 7f       	andi	r24, 0xF8	; 248
 1d0:	80 93 ad 00 	sts	0x00AD, r24
 1d4:	80 91 ad 00 	lds	r24, 0x00AD
 1d8:	88 2f       	mov	r24, r24
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	80 33       	cpi	r24, 0x30	; 48
 1de:	91 05       	cpc	r25, r1
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <ee24cxxx_write_page+0x166>
 1e2:	7f c0       	rjmp	.+254    	; 0x2e2 <ee24cxxx_write_page+0x264>
 1e4:	88 33       	cpi	r24, 0x38	; 56
 1e6:	91 05       	cpc	r25, r1
 1e8:	09 f4       	brne	.+2      	; 0x1ec <ee24cxxx_write_page+0x16e>
 1ea:	87 cf       	rjmp	.-242    	; 0xfa <ee24cxxx_write_page+0x7c>
 1ec:	88 32       	cpi	r24, 0x28	; 40
 1ee:	91 05       	cpc	r25, r1
 1f0:	59 f4       	brne	.+22     	; 0x208 <ee24cxxx_write_page+0x18a>
      goto begin;
    default:
      rv=-1;
      goto quit;
    }
  TWDR = addr&0x00ff; /*second address word (low)*/
 1f2:	83 e2       	ldi	r24, 0x23	; 35
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	2d 81       	ldd	r18, Y+5	; 0x05
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 1fc:	86 e5       	ldi	r24, 0x56	; 86
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	24 e8       	ldi	r18, 0x84	; 132
 202:	fc 01       	movw	r30, r24
 204:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 206:	05 c0       	rjmp	.+10     	; 0x212 <ee24cxxx_write_page+0x194>
    case TW_MT_DATA_NACK:
      goto quit;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      rv=-1;
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	9a 83       	std	Y+2, r25	; 0x02
 20e:	89 83       	std	Y+1, r24	; 0x01
      goto quit;
 210:	6b c0       	rjmp	.+214    	; 0x2e8 <ee24cxxx_write_page+0x26a>
    }
  TWDR = addr&0x00ff; /*second address word (low)*/
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 212:	86 e5       	ldi	r24, 0x56	; 86
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	80 81       	ld	r24, Z
 21a:	88 23       	and	r24, r24
 21c:	d4 f7       	brge	.-12     	; 0x212 <ee24cxxx_write_page+0x194>
  switch ((twst = TW_STATUS))
 21e:	81 e2       	ldi	r24, 0x21	; 33
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	80 81       	ld	r24, Z
 226:	88 7f       	andi	r24, 0xF8	; 248
 228:	80 93 ad 00 	sts	0x00AD, r24
 22c:	80 91 ad 00 	lds	r24, 0x00AD
 230:	88 2f       	mov	r24, r24
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	80 33       	cpi	r24, 0x30	; 48
 236:	91 05       	cpc	r25, r1
 238:	09 f4       	brne	.+2      	; 0x23c <ee24cxxx_write_page+0x1be>
 23a:	55 c0       	rjmp	.+170    	; 0x2e6 <ee24cxxx_write_page+0x268>
 23c:	88 33       	cpi	r24, 0x38	; 56
 23e:	91 05       	cpc	r25, r1
 240:	09 f4       	brne	.+2      	; 0x244 <ee24cxxx_write_page+0x1c6>
 242:	5d cf       	rjmp	.-326    	; 0xfe <ee24cxxx_write_page+0x80>
 244:	88 32       	cpi	r24, 0x28	; 40
 246:	91 05       	cpc	r25, r1
 248:	09 f4       	brne	.+2      	; 0x24c <ee24cxxx_write_page+0x1ce>
 24a:	44 c0       	rjmp	.+136    	; 0x2d4 <ee24cxxx_write_page+0x256>
    case TW_MT_DATA_NACK:
      goto quit;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      rv=-1;
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	9f ef       	ldi	r25, 0xFF	; 255
 250:	9a 83       	std	Y+2, r25	; 0x02
 252:	89 83       	std	Y+1, r24	; 0x01
      goto quit;
 254:	49 c0       	rjmp	.+146    	; 0x2e8 <ee24cxxx_write_page+0x26a>
  for (; len > 0; len--)
    {
      /* the address word low 6 bits are internally incremented following
	 the receipt of each data word. --at24c128/256 datasheet.
      */
      TWDR = *buf; /* send a byte */
 256:	83 e2       	ldi	r24, 0x23	; 35
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	29 85       	ldd	r18, Y+9	; 0x09
 25c:	3a 85       	ldd	r19, Y+10	; 0x0a
 25e:	f9 01       	movw	r30, r18
 260:	20 81       	ld	r18, Z
 262:	fc 01       	movw	r30, r24
 264:	20 83       	st	Z, r18
      buf++;
 266:	89 85       	ldd	r24, Y+9	; 0x09
 268:	9a 85       	ldd	r25, Y+10	; 0x0a
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	9a 87       	std	Y+10, r25	; 0x0a
 26e:	89 87       	std	Y+9, r24	; 0x09
      TWCR = _BV(TWINT) | _BV(TWEN); /* start transmission */
 270:	86 e5       	ldi	r24, 0x56	; 86
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	24 e8       	ldi	r18, 0x84	; 132
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 27a:	00 00       	nop
 27c:	86 e5       	ldi	r24, 0x56	; 86
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fc 01       	movw	r30, r24
 282:	80 81       	ld	r24, Z
 284:	88 23       	and	r24, r24
 286:	d4 f7       	brge	.-12     	; 0x27c <ee24cxxx_write_page+0x1fe>
      switch ((twst = TW_STATUS))
 288:	81 e2       	ldi	r24, 0x21	; 33
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	fc 01       	movw	r30, r24
 28e:	80 81       	ld	r24, Z
 290:	88 7f       	andi	r24, 0xF8	; 248
 292:	80 93 ad 00 	sts	0x00AD, r24
 296:	80 91 ad 00 	lds	r24, 0x00AD
 29a:	88 2f       	mov	r24, r24
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	88 32       	cpi	r24, 0x28	; 40
 2a0:	91 05       	cpc	r25, r1
 2a2:	41 f0       	breq	.+16     	; 0x2b4 <ee24cxxx_write_page+0x236>
 2a4:	80 33       	cpi	r24, 0x30	; 48
 2a6:	91 05       	cpc	r25, r1
 2a8:	81 f4       	brne	.+32     	; 0x2ca <ee24cxxx_write_page+0x24c>
	{
	case TW_MT_DATA_NACK:
	  rv=-1;
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	9f ef       	ldi	r25, 0xFF	; 255
 2ae:	9a 83       	std	Y+2, r25	; 0x02
 2b0:	89 83       	std	Y+1, r24	; 0x01
	  goto quit;
 2b2:	1a c0       	rjmp	.+52     	; 0x2e8 <ee24cxxx_write_page+0x26a>
	case TW_MT_DATA_ACK:
	  rv++;
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	9a 81       	ldd	r25, Y+2	; 0x02
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	9a 83       	std	Y+2, r25	; 0x02
 2bc:	89 83       	std	Y+1, r24	; 0x01
    default:
      rv=-1;
      goto quit;
    }
  
  for (; len > 0; len--)
 2be:	8f 81       	ldd	r24, Y+7	; 0x07
 2c0:	98 85       	ldd	r25, Y+8	; 0x08
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	98 87       	std	Y+8, r25	; 0x08
 2c6:	8f 83       	std	Y+7, r24	; 0x07
 2c8:	05 c0       	rjmp	.+10     	; 0x2d4 <ee24cxxx_write_page+0x256>
	  goto quit;
	case TW_MT_DATA_ACK:
	  rv++;
	  break;
	default:
	  rv=-1;
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	9a 83       	std	Y+2, r25	; 0x02
 2d0:	89 83       	std	Y+1, r24	; 0x01
	  goto quit;
 2d2:	0a c0       	rjmp	.+20     	; 0x2e8 <ee24cxxx_write_page+0x26a>
    default:
      rv=-1;
      goto quit;
    }
  
  for (; len > 0; len--)
 2d4:	8f 81       	ldd	r24, Y+7	; 0x07
 2d6:	98 85       	ldd	r25, Y+8	; 0x08
 2d8:	18 16       	cp	r1, r24
 2da:	19 06       	cpc	r1, r25
 2dc:	0c f4       	brge	.+2      	; 0x2e0 <ee24cxxx_write_page+0x262>
 2de:	bb cf       	rjmp	.-138    	; 0x256 <ee24cxxx_write_page+0x1d8>
 2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <ee24cxxx_write_page+0x26a>
  switch ((twst = TW_STATUS))
    {
    case TW_MT_DATA_ACK:
      break;
    case TW_MT_DATA_NACK:
      goto quit;
 2e2:	00 00       	nop
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <ee24cxxx_write_page+0x26a>
  switch ((twst = TW_STATUS))
    {
    case TW_MT_DATA_ACK:
      break;
    case TW_MT_DATA_NACK:
      goto quit;
 2e6:	00 00       	nop
	  goto quit;
	}
    }
  
 quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
 2e8:	86 e5       	ldi	r24, 0x56	; 86
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	24 e9       	ldi	r18, 0x94	; 148
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
  return rv;
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	9a 81       	ldd	r25, Y+2	; 0x02
  
}
 2f6:	2a 96       	adiw	r28, 0x0a	; 10
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	cf 91       	pop	r28
 304:	df 91       	pop	r29
 306:	08 95       	ret

00000308 <ee24cxxx_write_bytes>:

/* also use page write mode */
int ee24cxxx_write_bytes(uint16_t addr, int len, uint8_t *buf)
{
 308:	df 93       	push	r29
 30a:	cf 93       	push	r28
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	2a 97       	sbiw	r28, 0x0a	; 10
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	f8 94       	cli
 316:	de bf       	out	0x3e, r29	; 62
 318:	0f be       	out	0x3f, r0	; 63
 31a:	cd bf       	out	0x3d, r28	; 61
 31c:	9e 83       	std	Y+6, r25	; 0x06
 31e:	8d 83       	std	Y+5, r24	; 0x05
 320:	78 87       	std	Y+8, r23	; 0x08
 322:	6f 83       	std	Y+7, r22	; 0x07
 324:	5a 87       	std	Y+10, r21	; 0x0a
 326:	49 87       	std	Y+9, r20	; 0x09
  int rv;
  int total=0;
 328:	1a 82       	std	Y+2, r1	; 0x02
 32a:	19 82       	std	Y+1, r1	; 0x01
  
  do
    {
      rv = ee24cxxx_write_page(addr, len, buf);
 32c:	8d 81       	ldd	r24, Y+5	; 0x05
 32e:	9e 81       	ldd	r25, Y+6	; 0x06
 330:	4f 81       	ldd	r20, Y+7	; 0x07
 332:	58 85       	ldd	r21, Y+8	; 0x08
 334:	29 85       	ldd	r18, Y+9	; 0x09
 336:	3a 85       	ldd	r19, Y+10	; 0x0a
 338:	ba 01       	movw	r22, r20
 33a:	a9 01       	movw	r20, r18
 33c:	a0 de       	rcall	.-704    	; 0x7e <ee24cxxx_write_page>
 33e:	9c 83       	std	Y+4, r25	; 0x04
 340:	8b 83       	std	Y+3, r24	; 0x03
	1)rv==-1: error.
	2)rv==0: retry.
	3)rv<len: need to store the rest bytes to a new page.
	4)rv==len: all bytes have been stored in this page. so I can return now.
      */
      if(rv==-1)
 342:	8b 81       	ldd	r24, Y+3	; 0x03
 344:	9c 81       	ldd	r25, Y+4	; 0x04
 346:	2f ef       	ldi	r18, 0xFF	; 255
 348:	8f 3f       	cpi	r24, 0xFF	; 255
 34a:	92 07       	cpc	r25, r18
 34c:	19 f4       	brne	.+6      	; 0x354 <ee24cxxx_write_bytes+0x4c>
	return -1;
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	9f ef       	ldi	r25, 0xFF	; 255
 352:	29 c0       	rjmp	.+82     	; 0x3a6 <ee24cxxx_write_bytes+0x9e>
      len -= rv;      
 354:	2f 81       	ldd	r18, Y+7	; 0x07
 356:	38 85       	ldd	r19, Y+8	; 0x08
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	9c 81       	ldd	r25, Y+4	; 0x04
 35c:	a9 01       	movw	r20, r18
 35e:	48 1b       	sub	r20, r24
 360:	59 0b       	sbc	r21, r25
 362:	ca 01       	movw	r24, r20
 364:	98 87       	std	Y+8, r25	; 0x08
 366:	8f 83       	std	Y+7, r24	; 0x07
      addr += rv;
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	9c 81       	ldd	r25, Y+4	; 0x04
 36c:	2d 81       	ldd	r18, Y+5	; 0x05
 36e:	3e 81       	ldd	r19, Y+6	; 0x06
 370:	82 0f       	add	r24, r18
 372:	93 1f       	adc	r25, r19
 374:	9e 83       	std	Y+6, r25	; 0x06
 376:	8d 83       	std	Y+5, r24	; 0x05
      buf += rv;
 378:	8b 81       	ldd	r24, Y+3	; 0x03
 37a:	9c 81       	ldd	r25, Y+4	; 0x04
 37c:	29 85       	ldd	r18, Y+9	; 0x09
 37e:	3a 85       	ldd	r19, Y+10	; 0x0a
 380:	82 0f       	add	r24, r18
 382:	93 1f       	adc	r25, r19
 384:	9a 87       	std	Y+10, r25	; 0x0a
 386:	89 87       	std	Y+9, r24	; 0x09
      total += rv;
 388:	29 81       	ldd	r18, Y+1	; 0x01
 38a:	3a 81       	ldd	r19, Y+2	; 0x02
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	9c 81       	ldd	r25, Y+4	; 0x04
 390:	82 0f       	add	r24, r18
 392:	93 1f       	adc	r25, r19
 394:	9a 83       	std	Y+2, r25	; 0x02
 396:	89 83       	std	Y+1, r24	; 0x01
    }
  while(len > 0);
 398:	8f 81       	ldd	r24, Y+7	; 0x07
 39a:	98 85       	ldd	r25, Y+8	; 0x08
 39c:	18 16       	cp	r1, r24
 39e:	19 06       	cpc	r1, r25
 3a0:	2c f2       	brlt	.-118    	; 0x32c <ee24cxxx_write_bytes+0x24>
  
  return total;
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	9a 81       	ldd	r25, Y+2	; 0x02
      
}
 3a6:	2a 96       	adiw	r28, 0x0a	; 10
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	cd bf       	out	0x3d, r28	; 61
 3b2:	cf 91       	pop	r28
 3b4:	df 91       	pop	r29
 3b6:	08 95       	ret

000003b8 <ee24cxxx_read_bytes>:

/*random/sequential read mode*/
int ee24cxxx_read_bytes(uint16_t addr, int len, uint8_t *buf)
{
 3b8:	df 93       	push	r29
 3ba:	cf 93       	push	r28
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
 3c0:	29 97       	sbiw	r28, 0x09	; 9
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	9d 83       	std	Y+5, r25	; 0x05
 3ce:	8c 83       	std	Y+4, r24	; 0x04
 3d0:	7f 83       	std	Y+7, r23	; 0x07
 3d2:	6e 83       	std	Y+6, r22	; 0x06
 3d4:	59 87       	std	Y+9, r21	; 0x09
 3d6:	48 87       	std	Y+8, r20	; 0x08
  uint8_t twcr;
  int rv=0;
 3d8:	1b 82       	std	Y+3, r1	; 0x03
 3da:	1a 82       	std	Y+2, r1	; 0x02
 3dc:	0d c0       	rjmp	.+26     	; 0x3f8 <ee24cxxx_read_bytes+0x40>
    {
    case TW_REP_START: /* OK, but should not happen */
    case TW_START:
      break;
    case TW_MT_ARB_LOST:
      goto begin;
 3de:	00 00       	nop
 3e0:	0b c0       	rjmp	.+22     	; 0x3f8 <ee24cxxx_read_bytes+0x40>
  switch ((twst = TW_STATUS))
    {
    case TW_MT_SLA_ACK:
      break;
    case TW_MT_SLA_NACK: /* nack during select: device busy writing */
      goto begin;
 3e2:	00 00       	nop
 3e4:	09 c0       	rjmp	.+18     	; 0x3f8 <ee24cxxx_read_bytes+0x40>
    case TW_MT_ARB_LOST: /* re-arbitrate */
      goto begin;
 3e6:	00 00       	nop
 3e8:	07 c0       	rjmp	.+14     	; 0x3f8 <ee24cxxx_read_bytes+0x40>
    case TW_MT_DATA_ACK:
      break;
    case TW_MT_DATA_NACK:
      goto quit;
    case TW_MT_ARB_LOST:
      goto begin;
 3ea:	00 00       	nop
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <ee24cxxx_read_bytes+0x40>
    case TW_MT_DATA_ACK:
      break;
    case TW_MT_DATA_NACK:
      goto quit;
    case TW_MT_ARB_LOST:
      goto begin;
 3ee:	00 00       	nop
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <ee24cxxx_read_bytes+0x40>
    {
    case TW_START: /* OK, but should not happen */
    case TW_REP_START:
      break;
    case TW_MT_ARB_LOST:
      goto begin;
 3f2:	00 00       	nop
 3f4:	01 c0       	rjmp	.+2      	; 0x3f8 <ee24cxxx_read_bytes+0x40>
    case TW_MR_SLA_ACK:
      break;
    case TW_MR_SLA_NACK:
      goto quit;
    case TW_MR_ARB_LOST:
      goto begin;
 3f6:	00 00       	nop
{
  uint8_t twcr;
  int rv=0;
  
 begin:
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send start condition */
 3f8:	86 e5       	ldi	r24, 0x56	; 86
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	24 ea       	ldi	r18, 0xA4	; 164
 3fe:	fc 01       	movw	r30, r24
 400:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 402:	00 00       	nop
 404:	86 e5       	ldi	r24, 0x56	; 86
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	fc 01       	movw	r30, r24
 40a:	80 81       	ld	r24, Z
 40c:	88 23       	and	r24, r24
 40e:	d4 f7       	brge	.-12     	; 0x404 <ee24cxxx_read_bytes+0x4c>
  switch ((twst = TW_STATUS))
 410:	81 e2       	ldi	r24, 0x21	; 33
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	fc 01       	movw	r30, r24
 416:	80 81       	ld	r24, Z
 418:	88 7f       	andi	r24, 0xF8	; 248
 41a:	80 93 ad 00 	sts	0x00AD, r24
 41e:	80 91 ad 00 	lds	r24, 0x00AD
 422:	88 2f       	mov	r24, r24
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	80 31       	cpi	r24, 0x10	; 16
 428:	91 05       	cpc	r25, r1
 42a:	31 f0       	breq	.+12     	; 0x438 <ee24cxxx_read_bytes+0x80>
 42c:	88 33       	cpi	r24, 0x38	; 56
 42e:	91 05       	cpc	r25, r1
 430:	b1 f2       	breq	.-84     	; 0x3de <ee24cxxx_read_bytes+0x26>
 432:	88 30       	cpi	r24, 0x08	; 8
 434:	91 05       	cpc	r25, r1
 436:	59 f4       	brne	.+22     	; 0x44e <ee24cxxx_read_bytes+0x96>
    default:
      return -1;
      /*do /not/ send stop condition*/
    }
  
  TWDR = SLA_W_24CXXX;
 438:	83 e2       	ldi	r24, 0x23	; 35
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	20 ea       	ldi	r18, 0xA0	; 160
 43e:	fc 01       	movw	r30, r24
 440:	20 83       	st	Z, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 442:	86 e5       	ldi	r24, 0x56	; 86
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	24 e8       	ldi	r18, 0x84	; 132
 448:	fc 01       	movw	r30, r24
 44a:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 44c:	03 c0       	rjmp	.+6      	; 0x454 <ee24cxxx_read_bytes+0x9c>
    case TW_START:
      break;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      return -1;
 44e:	8f ef       	ldi	r24, 0xFF	; 255
 450:	9f ef       	ldi	r25, 0xFF	; 255
 452:	36 c1       	rjmp	.+620    	; 0x6c0 <__stack+0x261>
      /*do /not/ send stop condition*/
    }
  
  TWDR = SLA_W_24CXXX;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 454:	86 e5       	ldi	r24, 0x56	; 86
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	fc 01       	movw	r30, r24
 45a:	80 81       	ld	r24, Z
 45c:	88 23       	and	r24, r24
 45e:	d4 f7       	brge	.-12     	; 0x454 <ee24cxxx_read_bytes+0x9c>
  switch ((twst = TW_STATUS))
 460:	81 e2       	ldi	r24, 0x21	; 33
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	fc 01       	movw	r30, r24
 466:	80 81       	ld	r24, Z
 468:	88 7f       	andi	r24, 0xF8	; 248
 46a:	80 93 ad 00 	sts	0x00AD, r24
 46e:	80 91 ad 00 	lds	r24, 0x00AD
 472:	88 2f       	mov	r24, r24
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	80 32       	cpi	r24, 0x20	; 32
 478:	91 05       	cpc	r25, r1
 47a:	09 f4       	brne	.+2      	; 0x47e <__stack+0x1f>
 47c:	b2 cf       	rjmp	.-156    	; 0x3e2 <ee24cxxx_read_bytes+0x2a>
 47e:	88 33       	cpi	r24, 0x38	; 56
 480:	91 05       	cpc	r25, r1
 482:	09 f4       	brne	.+2      	; 0x486 <__stack+0x27>
 484:	b0 cf       	rjmp	.-160    	; 0x3e6 <ee24cxxx_read_bytes+0x2e>
 486:	88 31       	cpi	r24, 0x18	; 24
 488:	91 05       	cpc	r25, r1
 48a:	71 f4       	brne	.+28     	; 0x4a8 <__stack+0x49>
    default:
      rv=-1;
      goto quit; /*return error and send stop condition*/
    }

  TWDR = addr>>8; /* first address word (high)*/
 48c:	83 e2       	ldi	r24, 0x23	; 35
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	2c 81       	ldd	r18, Y+4	; 0x04
 492:	3d 81       	ldd	r19, Y+5	; 0x05
 494:	23 2f       	mov	r18, r19
 496:	33 27       	eor	r19, r19
 498:	fc 01       	movw	r30, r24
 49a:	20 83       	st	Z, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 49c:	86 e5       	ldi	r24, 0x56	; 86
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	24 e8       	ldi	r18, 0x84	; 132
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <__stack+0x53>
    case TW_MT_SLA_NACK: /* nack during select: device busy writing */
      goto begin;
    case TW_MT_ARB_LOST: /* re-arbitrate */
      goto begin;
    default:
      rv=-1;
 4a8:	8f ef       	ldi	r24, 0xFF	; 255
 4aa:	9f ef       	ldi	r25, 0xFF	; 255
 4ac:	9b 83       	std	Y+3, r25	; 0x03
 4ae:	8a 83       	std	Y+2, r24	; 0x02
      goto quit; /*return error and send stop condition*/
 4b0:	00 c1       	rjmp	.+512    	; 0x6b2 <__stack+0x253>
    }

  TWDR = addr>>8; /* first address word (high)*/
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 4b2:	86 e5       	ldi	r24, 0x56	; 86
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	fc 01       	movw	r30, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	88 23       	and	r24, r24
 4bc:	d4 f7       	brge	.-12     	; 0x4b2 <__stack+0x53>
  switch ((twst = TW_STATUS))
 4be:	81 e2       	ldi	r24, 0x21	; 33
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	fc 01       	movw	r30, r24
 4c4:	80 81       	ld	r24, Z
 4c6:	88 7f       	andi	r24, 0xF8	; 248
 4c8:	80 93 ad 00 	sts	0x00AD, r24
 4cc:	80 91 ad 00 	lds	r24, 0x00AD
 4d0:	88 2f       	mov	r24, r24
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	80 33       	cpi	r24, 0x30	; 48
 4d6:	91 05       	cpc	r25, r1
 4d8:	09 f4       	brne	.+2      	; 0x4dc <__stack+0x7d>
 4da:	e6 c0       	rjmp	.+460    	; 0x6a8 <__stack+0x249>
 4dc:	88 33       	cpi	r24, 0x38	; 56
 4de:	91 05       	cpc	r25, r1
 4e0:	09 f4       	brne	.+2      	; 0x4e4 <__stack+0x85>
 4e2:	83 cf       	rjmp	.-250    	; 0x3ea <ee24cxxx_read_bytes+0x32>
 4e4:	88 32       	cpi	r24, 0x28	; 40
 4e6:	91 05       	cpc	r25, r1
 4e8:	59 f4       	brne	.+22     	; 0x500 <__stack+0xa1>
      goto begin;
    default:
      rv=-1;
      goto quit;
    }
  TWDR = addr&0x00ff; /*second address word (low)*/
 4ea:	83 e2       	ldi	r24, 0x23	; 35
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	2c 81       	ldd	r18, Y+4	; 0x04
 4f0:	fc 01       	movw	r30, r24
 4f2:	20 83       	st	Z, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 4f4:	86 e5       	ldi	r24, 0x56	; 86
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	24 e8       	ldi	r18, 0x84	; 132
 4fa:	fc 01       	movw	r30, r24
 4fc:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 4fe:	05 c0       	rjmp	.+10     	; 0x50a <__stack+0xab>
    case TW_MT_DATA_NACK:
      goto quit;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      rv=-1;
 500:	8f ef       	ldi	r24, 0xFF	; 255
 502:	9f ef       	ldi	r25, 0xFF	; 255
 504:	9b 83       	std	Y+3, r25	; 0x03
 506:	8a 83       	std	Y+2, r24	; 0x02
      goto quit;
 508:	d4 c0       	rjmp	.+424    	; 0x6b2 <__stack+0x253>
    }
  TWDR = addr&0x00ff; /*second address word (low)*/
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 50a:	86 e5       	ldi	r24, 0x56	; 86
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	fc 01       	movw	r30, r24
 510:	80 81       	ld	r24, Z
 512:	88 23       	and	r24, r24
 514:	d4 f7       	brge	.-12     	; 0x50a <__stack+0xab>
  switch ((twst = TW_STATUS))
 516:	81 e2       	ldi	r24, 0x21	; 33
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	fc 01       	movw	r30, r24
 51c:	80 81       	ld	r24, Z
 51e:	88 7f       	andi	r24, 0xF8	; 248
 520:	80 93 ad 00 	sts	0x00AD, r24
 524:	80 91 ad 00 	lds	r24, 0x00AD
 528:	88 2f       	mov	r24, r24
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	80 33       	cpi	r24, 0x30	; 48
 52e:	91 05       	cpc	r25, r1
 530:	09 f4       	brne	.+2      	; 0x534 <__stack+0xd5>
 532:	bc c0       	rjmp	.+376    	; 0x6ac <__stack+0x24d>
 534:	88 33       	cpi	r24, 0x38	; 56
 536:	91 05       	cpc	r25, r1
 538:	09 f4       	brne	.+2      	; 0x53c <__stack+0xdd>
 53a:	59 cf       	rjmp	.-334    	; 0x3ee <ee24cxxx_read_bytes+0x36>
 53c:	88 32       	cpi	r24, 0x28	; 40
 53e:	91 05       	cpc	r25, r1
 540:	31 f4       	brne	.+12     	; 0x54e <__stack+0xef>
      goto quit;
    }
  

  /*Next cycle: master receiver mode*/
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
 542:	86 e5       	ldi	r24, 0x56	; 86
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	24 ea       	ldi	r18, 0xA4	; 164
 548:	fc 01       	movw	r30, r24
 54a:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 54c:	05 c0       	rjmp	.+10     	; 0x558 <__stack+0xf9>
    case TW_MT_DATA_NACK:
      goto quit;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      rv=-1;
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	9f ef       	ldi	r25, 0xFF	; 255
 552:	9b 83       	std	Y+3, r25	; 0x03
 554:	8a 83       	std	Y+2, r24	; 0x02
      goto quit;
 556:	ad c0       	rjmp	.+346    	; 0x6b2 <__stack+0x253>
    }
  

  /*Next cycle: master receiver mode*/
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN); /* send (rep.) start condition */
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 558:	86 e5       	ldi	r24, 0x56	; 86
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	fc 01       	movw	r30, r24
 55e:	80 81       	ld	r24, Z
 560:	88 23       	and	r24, r24
 562:	d4 f7       	brge	.-12     	; 0x558 <__stack+0xf9>
  switch ((twst = TW_STATUS))
 564:	81 e2       	ldi	r24, 0x21	; 33
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	fc 01       	movw	r30, r24
 56a:	80 81       	ld	r24, Z
 56c:	88 7f       	andi	r24, 0xF8	; 248
 56e:	80 93 ad 00 	sts	0x00AD, r24
 572:	80 91 ad 00 	lds	r24, 0x00AD
 576:	88 2f       	mov	r24, r24
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	80 31       	cpi	r24, 0x10	; 16
 57c:	91 05       	cpc	r25, r1
 57e:	39 f0       	breq	.+14     	; 0x58e <__stack+0x12f>
 580:	88 33       	cpi	r24, 0x38	; 56
 582:	91 05       	cpc	r25, r1
 584:	09 f4       	brne	.+2      	; 0x588 <__stack+0x129>
 586:	35 cf       	rjmp	.-406    	; 0x3f2 <ee24cxxx_read_bytes+0x3a>
 588:	88 30       	cpi	r24, 0x08	; 8
 58a:	91 05       	cpc	r25, r1
 58c:	59 f4       	brne	.+22     	; 0x5a4 <__stack+0x145>
    default:
      rv=-1;
      goto quit;
    }
  
  TWDR = SLA_R_24CXXX;
 58e:	83 e2       	ldi	r24, 0x23	; 35
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	21 ea       	ldi	r18, 0xA1	; 161
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
 598:	86 e5       	ldi	r24, 0x56	; 86
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	24 e8       	ldi	r18, 0x84	; 132
 59e:	fc 01       	movw	r30, r24
 5a0:	20 83       	st	Z, r18
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 5a2:	05 c0       	rjmp	.+10     	; 0x5ae <__stack+0x14f>
    case TW_REP_START:
      break;
    case TW_MT_ARB_LOST:
      goto begin;
    default:
      rv=-1;
 5a4:	8f ef       	ldi	r24, 0xFF	; 255
 5a6:	9f ef       	ldi	r25, 0xFF	; 255
 5a8:	9b 83       	std	Y+3, r25	; 0x03
 5aa:	8a 83       	std	Y+2, r24	; 0x02
      goto quit;
 5ac:	82 c0       	rjmp	.+260    	; 0x6b2 <__stack+0x253>
    }
  
  TWDR = SLA_R_24CXXX;
  TWCR = _BV(TWINT) | _BV(TWEN); /* clear interrupt to start transmission */
  while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 5ae:	86 e5       	ldi	r24, 0x56	; 86
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	fc 01       	movw	r30, r24
 5b4:	80 81       	ld	r24, Z
 5b6:	88 23       	and	r24, r24
 5b8:	d4 f7       	brge	.-12     	; 0x5ae <__stack+0x14f>
  switch ((twst = TW_STATUS))
 5ba:	81 e2       	ldi	r24, 0x21	; 33
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	fc 01       	movw	r30, r24
 5c0:	80 81       	ld	r24, Z
 5c2:	88 7f       	andi	r24, 0xF8	; 248
 5c4:	80 93 ad 00 	sts	0x00AD, r24
 5c8:	80 91 ad 00 	lds	r24, 0x00AD
 5cc:	88 2f       	mov	r24, r24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	80 34       	cpi	r24, 0x40	; 64
 5d2:	91 05       	cpc	r25, r1
 5d4:	49 f0       	breq	.+18     	; 0x5e8 <__stack+0x189>
 5d6:	88 34       	cpi	r24, 0x48	; 72
 5d8:	91 05       	cpc	r25, r1
 5da:	09 f4       	brne	.+2      	; 0x5de <__stack+0x17f>
 5dc:	69 c0       	rjmp	.+210    	; 0x6b0 <__stack+0x251>
 5de:	88 33       	cpi	r24, 0x38	; 56
 5e0:	91 05       	cpc	r25, r1
 5e2:	09 f4       	brne	.+2      	; 0x5e6 <__stack+0x187>
 5e4:	08 cf       	rjmp	.-496    	; 0x3f6 <ee24cxxx_read_bytes+0x3e>
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <__stack+0x18f>
  /*
    1)len=1: after receiving a byte, the Master Receiver send NACK, then send stop.
    2)len>1: after receiving a byte, the Master Receiver send ACK, so the eeprom
    will send the following byte.
    about TWEA bit, see also at24c128/256 and atmega48 datasheet for details */  
  twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); /* MR send ACK */
 5e8:	84 ec       	ldi	r24, 0xC4	; 196
 5ea:	89 83       	std	Y+1, r24	; 0x01
  for(; len>0; len--)
 5ec:	56 c0       	rjmp	.+172    	; 0x69a <__stack+0x23b>
    case TW_MR_SLA_NACK:
      goto quit;
    case TW_MR_ARB_LOST:
      goto begin;
    default:
      rv=-1;
 5ee:	8f ef       	ldi	r24, 0xFF	; 255
 5f0:	9f ef       	ldi	r25, 0xFF	; 255
 5f2:	9b 83       	std	Y+3, r25	; 0x03
 5f4:	8a 83       	std	Y+2, r24	; 0x02
      goto quit;
 5f6:	5d c0       	rjmp	.+186    	; 0x6b2 <__stack+0x253>
    will send the following byte.
    about TWEA bit, see also at24c128/256 and atmega48 datasheet for details */  
  twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); /* MR send ACK */
  for(; len>0; len--)
    {
      if(len==1)
 5f8:	8e 81       	ldd	r24, Y+6	; 0x06
 5fa:	9f 81       	ldd	r25, Y+7	; 0x07
 5fc:	81 30       	cpi	r24, 0x01	; 1
 5fe:	91 05       	cpc	r25, r1
 600:	11 f4       	brne	.+4      	; 0x606 <__stack+0x1a7>
	twcr = _BV(TWINT) | _BV(TWEN); /* send NACK */
 602:	84 e8       	ldi	r24, 0x84	; 132
 604:	89 83       	std	Y+1, r24	; 0x01
      
      TWCR=twcr; /* clear interrupt to start transmission */
 606:	86 e5       	ldi	r24, 0x56	; 86
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	29 81       	ldd	r18, Y+1	; 0x01
 60c:	fc 01       	movw	r30, r24
 60e:	20 83       	st	Z, r18
      
      while ((TWCR & _BV(TWINT)) == 0) ; /* wait for transmission */
 610:	00 00       	nop
 612:	86 e5       	ldi	r24, 0x56	; 86
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	fc 01       	movw	r30, r24
 618:	80 81       	ld	r24, Z
 61a:	88 23       	and	r24, r24
 61c:	d4 f7       	brge	.-12     	; 0x612 <__stack+0x1b3>
      switch ((twst = TW_STATUS))
 61e:	81 e2       	ldi	r24, 0x21	; 33
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	fc 01       	movw	r30, r24
 624:	80 81       	ld	r24, Z
 626:	88 7f       	andi	r24, 0xF8	; 248
 628:	80 93 ad 00 	sts	0x00AD, r24
 62c:	80 91 ad 00 	lds	r24, 0x00AD
 630:	88 2f       	mov	r24, r24
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	80 35       	cpi	r24, 0x50	; 80
 636:	91 05       	cpc	r25, r1
 638:	99 f0       	breq	.+38     	; 0x660 <__stack+0x201>
 63a:	88 35       	cpi	r24, 0x58	; 88
 63c:	91 05       	cpc	r25, r1
 63e:	19 f5       	brne	.+70     	; 0x686 <__stack+0x227>
	{
	case TW_MR_DATA_NACK:
	  *buf = TWDR;
 640:	83 e2       	ldi	r24, 0x23	; 35
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	fc 01       	movw	r30, r24
 646:	20 81       	ld	r18, Z
 648:	88 85       	ldd	r24, Y+8	; 0x08
 64a:	99 85       	ldd	r25, Y+9	; 0x09
 64c:	fc 01       	movw	r30, r24
 64e:	20 83       	st	Z, r18
	  rv++;
 650:	8a 81       	ldd	r24, Y+2	; 0x02
 652:	9b 81       	ldd	r25, Y+3	; 0x03
 654:	01 96       	adiw	r24, 0x01	; 1
 656:	9b 83       	std	Y+3, r25	; 0x03
 658:	8a 83       	std	Y+2, r24	; 0x02
	  len=0; /*just ensure*/
 65a:	1f 82       	std	Y+7, r1	; 0x07
 65c:	1e 82       	std	Y+6, r1	; 0x06
	  break;
 65e:	18 c0       	rjmp	.+48     	; 0x690 <__stack+0x231>
	case TW_MR_DATA_ACK:
	  *buf = TWDR;
 660:	83 e2       	ldi	r24, 0x23	; 35
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	fc 01       	movw	r30, r24
 666:	20 81       	ld	r18, Z
 668:	88 85       	ldd	r24, Y+8	; 0x08
 66a:	99 85       	ldd	r25, Y+9	; 0x09
 66c:	fc 01       	movw	r30, r24
 66e:	20 83       	st	Z, r18
	  buf++;
 670:	88 85       	ldd	r24, Y+8	; 0x08
 672:	99 85       	ldd	r25, Y+9	; 0x09
 674:	01 96       	adiw	r24, 0x01	; 1
 676:	99 87       	std	Y+9, r25	; 0x09
 678:	88 87       	std	Y+8, r24	; 0x08
	  rv++;
 67a:	8a 81       	ldd	r24, Y+2	; 0x02
 67c:	9b 81       	ldd	r25, Y+3	; 0x03
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	9b 83       	std	Y+3, r25	; 0x03
 682:	8a 83       	std	Y+2, r24	; 0x02
	  break;
 684:	05 c0       	rjmp	.+10     	; 0x690 <__stack+0x231>
	default:
	  rv=-1;
 686:	8f ef       	ldi	r24, 0xFF	; 255
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	9b 83       	std	Y+3, r25	; 0x03
 68c:	8a 83       	std	Y+2, r24	; 0x02
	  goto quit;
 68e:	11 c0       	rjmp	.+34     	; 0x6b2 <__stack+0x253>
    1)len=1: after receiving a byte, the Master Receiver send NACK, then send stop.
    2)len>1: after receiving a byte, the Master Receiver send ACK, so the eeprom
    will send the following byte.
    about TWEA bit, see also at24c128/256 and atmega48 datasheet for details */  
  twcr = _BV(TWINT) | _BV(TWEN) | _BV(TWEA); /* MR send ACK */
  for(; len>0; len--)
 690:	8e 81       	ldd	r24, Y+6	; 0x06
 692:	9f 81       	ldd	r25, Y+7	; 0x07
 694:	01 97       	sbiw	r24, 0x01	; 1
 696:	9f 83       	std	Y+7, r25	; 0x07
 698:	8e 83       	std	Y+6, r24	; 0x06
 69a:	8e 81       	ldd	r24, Y+6	; 0x06
 69c:	9f 81       	ldd	r25, Y+7	; 0x07
 69e:	18 16       	cp	r1, r24
 6a0:	19 06       	cpc	r1, r25
 6a2:	0c f4       	brge	.+2      	; 0x6a6 <__stack+0x247>
 6a4:	a9 cf       	rjmp	.-174    	; 0x5f8 <__stack+0x199>
 6a6:	05 c0       	rjmp	.+10     	; 0x6b2 <__stack+0x253>
  switch ((twst = TW_STATUS))
    {
    case TW_MT_DATA_ACK:
      break;
    case TW_MT_DATA_NACK:
      goto quit;
 6a8:	00 00       	nop
 6aa:	03 c0       	rjmp	.+6      	; 0x6b2 <__stack+0x253>
  switch ((twst = TW_STATUS))
    {
    case TW_MT_DATA_ACK:
      break;
    case TW_MT_DATA_NACK:
      goto quit;
 6ac:	00 00       	nop
 6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <__stack+0x253>
  switch ((twst = TW_STATUS))
    {
    case TW_MR_SLA_ACK:
      break;
    case TW_MR_SLA_NACK:
      goto quit;
 6b0:	00 00       	nop
	  goto quit;
	  
	}
    }
 quit:
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN); /* send stop condition */
 6b2:	86 e5       	ldi	r24, 0x56	; 86
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	24 e9       	ldi	r18, 0x94	; 148
 6b8:	fc 01       	movw	r30, r24
 6ba:	20 83       	st	Z, r18
  return rv;
 6bc:	8a 81       	ldd	r24, Y+2	; 0x02
 6be:	9b 81       	ldd	r25, Y+3	; 0x03
  
 6c0:	29 96       	adiw	r28, 0x09	; 9
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	de bf       	out	0x3e, r29	; 62
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	cd bf       	out	0x3d, r28	; 61
 6cc:	cf 91       	pop	r28
 6ce:	df 91       	pop	r29
 6d0:	08 95       	ret

000006d2 <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
 6d4:	00 c0       	rjmp	.+0      	; 0x6d6 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
 6da:	00 c0       	rjmp	.+0      	; 0x6dc <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
 6dc:	00 c0       	rjmp	.+0      	; 0x6de <i2c_delay_T2+0xc>
6:	nop          ; 1   "
 6de:	00 00       	nop
	ret          ; 3   "
 6e0:	08 95       	ret

000006e2 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
 6e2:	8c 98       	cbi	0x11, 4	; 17
	cbi SCL_DDR,SCL		;release SCL
 6e4:	8d 98       	cbi	0x11, 5	; 17
	cbi SDA_OUT,SDA
 6e6:	94 98       	cbi	0x12, 4	; 18
	cbi SCL_OUT,SCL
 6e8:	95 98       	cbi	0x12, 5	; 18
	ret
 6ea:	08 95       	ret

000006ec <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
 6ec:	8c 9a       	sbi	0x11, 4	; 17
	rcall 	i2c_delay_T2	;delay T/2
 6ee:	f1 df       	rcall	.-30     	; 0x6d2 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
 6f0:	1d d0       	rcall	.+58     	; 0x72c <i2c_write>
	ret
 6f2:	08 95       	ret

000006f4 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
 6f4:	8d 9a       	sbi	0x11, 5	; 17
	rcall 	i2c_delay_T2	;delay  T/2
 6f6:	ed df       	rcall	.-38     	; 0x6d2 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
 6f8:	8c 98       	cbi	0x11, 4	; 17
	rcall	i2c_delay_T2	;delay T/2
 6fa:	eb df       	rcall	.-42     	; 0x6d2 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 6fc:	8d 98       	cbi	0x11, 5	; 17
	rcall 	i2c_delay_T2	;delay  T/2
 6fe:	e9 df       	rcall	.-46     	; 0x6d2 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
 700:	8c 9a       	sbi	0x11, 4	; 17
	rcall 	i2c_delay_T2	;delay	T/2
 702:	e7 df       	rcall	.-50     	; 0x6d2 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
 704:	13 d0       	rcall	.+38     	; 0x72c <i2c_write>
	ret
 706:	08 95       	ret

00000708 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
 708:	08 2e       	mov	r0, r24

0000070a <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
 70a:	8c 9a       	sbi	0x11, 4	; 17
	rcall 	i2c_delay_T2	;delay T/2
 70c:	e2 df       	rcall	.-60     	; 0x6d2 <i2c_delay_T2>
	mov	r24,__tmp_reg__
 70e:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
 710:	0d d0       	rcall	.+26     	; 0x72c <i2c_write>
	tst	r24		;if device not busy -> done
 712:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
 714:	11 f0       	breq	.+4      	; 0x71a <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
 716:	02 d0       	rcall	.+4      	; 0x71c <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
 718:	f8 cf       	rjmp	.-16     	; 0x70a <i2c_start_wait1>

0000071a <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
 71a:	08 95       	ret

0000071c <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
 71c:	8d 9a       	sbi	0x11, 5	; 17
	sbi	SDA_DDR,SDA	;force SDA low
 71e:	8c 9a       	sbi	0x11, 4	; 17
	rcall	i2c_delay_T2	;delay T/2
 720:	d8 df       	rcall	.-80     	; 0x6d2 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 722:	8d 98       	cbi	0x11, 5	; 17
	rcall	i2c_delay_T2	;delay T/2
 724:	d6 df       	rcall	.-84     	; 0x6d2 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
 726:	8c 98       	cbi	0x11, 4	; 17
	rcall	i2c_delay_T2	;delay T/2
 728:	d4 df       	rcall	.-88     	; 0x6d2 <i2c_delay_T2>
	ret
 72a:	08 95       	ret

0000072c <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
 72c:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
 72e:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
 730:	01 c0       	rjmp	.+2      	; 0x734 <i2c_write_first>

00000732 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
 732:	88 0f       	add	r24, r24

00000734 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
 734:	59 f0       	breq	.+22     	; 0x74c <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
 736:	8d 9a       	sbi	0x11, 5	; 17
	brcc	i2c_write_low
 738:	18 f4       	brcc	.+6      	; 0x740 <i2c_write_low>
	nop
 73a:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
 73c:	8c 98       	cbi	0x11, 4	; 17
	rjmp	i2c_write_high
 73e:	02 c0       	rjmp	.+4      	; 0x744 <i2c_write_high>

00000740 <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
 740:	8c 9a       	sbi	0x11, 4	; 17
	rjmp	i2c_write_high
 742:	00 c0       	rjmp	.+0      	; 0x744 <i2c_write_high>

00000744 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
 744:	c6 df       	rcall	.-116    	; 0x6d2 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 746:	8d 98       	cbi	0x11, 5	; 17
	rcall	i2c_delay_T2	;delay T/2
 748:	c4 df       	rcall	.-120    	; 0x6d2 <i2c_delay_T2>
	rjmp	i2c_write_bit
 74a:	f3 cf       	rjmp	.-26     	; 0x732 <i2c_write_bit>

0000074c <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
 74c:	8d 9a       	sbi	0x11, 5	; 17
	cbi	SDA_DDR,SDA	;release SDA
 74e:	8c 98       	cbi	0x11, 4	; 17
	rcall	i2c_delay_T2	;delay T/2
 750:	c0 df       	rcall	.-128    	; 0x6d2 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 752:	8d 98       	cbi	0x11, 5	; 17

00000754 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
 754:	85 9b       	sbis	0x10, 5	; 16
	rjmp	i2c_ack_wait
 756:	fe cf       	rjmp	.-4      	; 0x754 <i2c_ack_wait>
	
	clr	r24		;return 0
 758:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
 75a:	84 99       	sbic	0x10, 4	; 16
	ldi	r24,1
 75c:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
 75e:	b9 df       	rcall	.-142    	; 0x6d2 <i2c_delay_T2>
	clr	r25
 760:	99 27       	eor	r25, r25
	ret
 762:	08 95       	ret

00000764 <i2c_readNak>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
 764:	88 27       	eor	r24, r24
	rjmp	i2c_read
 766:	01 c0       	rjmp	.+2      	; 0x76a <i2c_read>

00000768 <i2c_readAck>:
i2c_readAck:
	ldi	r24,0x01
 768:	81 e0       	ldi	r24, 0x01	; 1

0000076a <i2c_read>:
i2c_read:
	ldi	r23,0x01	;data = 0x01
 76a:	71 e0       	ldi	r23, 0x01	; 1

0000076c <i2c_read_bit>:
i2c_read_bit:
	sbi	SCL_DDR,SCL	;force SCL low
 76c:	8d 9a       	sbi	0x11, 5	; 17
	cbi	SDA_DDR,SDA	;release SDA (from previous ACK)
 76e:	8c 98       	cbi	0x11, 4	; 17
	rcall	i2c_delay_T2	;delay T/2
 770:	b0 df       	rcall	.-160    	; 0x6d2 <i2c_delay_T2>
	
	cbi	SCL_DDR,SCL	;release SCL
 772:	8d 98       	cbi	0x11, 5	; 17
	rcall	i2c_delay_T2	;delay T/2
 774:	ae df       	rcall	.-164    	; 0x6d2 <i2c_delay_T2>

00000776 <i2c_read_stretch>:
	
i2c_read_stretch:
    sbis SCL_IN, SCL        ;loop until SCL is high (allow slave to stretch SCL)
 776:	85 9b       	sbis	0x10, 5	; 16
    rjmp	i2c_read_stretch
 778:	fe cf       	rjmp	.-4      	; 0x776 <i2c_read_stretch>
    	
	clc			;clear carry flag
 77a:	88 94       	clc
	sbic	SDA_IN,SDA	;if SDA is high
 77c:	84 99       	sbic	0x10, 4	; 16
	sec			;  set carry flag
 77e:	08 94       	sec
	
	rol	r23		;store bit
 780:	77 1f       	adc	r23, r23
	brcc	i2c_read_bit	;while receive register not full
 782:	a0 f7       	brcc	.-24     	; 0x76c <i2c_read_bit>

00000784 <i2c_put_ack>:
	
i2c_put_ack:
	sbi	SCL_DDR,SCL	;force SCL low	
 784:	8d 9a       	sbi	0x11, 5	; 17
	cpi	r24,1
 786:	81 30       	cpi	r24, 0x01	; 1
	breq	i2c_put_ack_low	;if (ack=0)
 788:	11 f0       	breq	.+4      	; 0x78e <i2c_put_ack_low>
	cbi	SDA_DDR,SDA	;      release SDA
 78a:	8c 98       	cbi	0x11, 4	; 17
	rjmp	i2c_put_ack_high
 78c:	01 c0       	rjmp	.+2      	; 0x790 <i2c_put_ack_high>

0000078e <i2c_put_ack_low>:
i2c_put_ack_low:                ;else
	sbi	SDA_DDR,SDA	;      force SDA low
 78e:	8c 9a       	sbi	0x11, 4	; 17

00000790 <i2c_put_ack_high>:
i2c_put_ack_high:
	rcall	i2c_delay_T2	;delay T/2
 790:	a0 df       	rcall	.-192    	; 0x6d2 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
 792:	8d 98       	cbi	0x11, 5	; 17

00000794 <i2c_put_ack_wait>:
i2c_put_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high
 794:	85 9b       	sbis	0x10, 5	; 16
	rjmp	i2c_put_ack_wait
 796:	fe cf       	rjmp	.-4      	; 0x794 <i2c_put_ack_wait>
	rcall	i2c_delay_T2	;delay T/2
 798:	9c df       	rcall	.-200    	; 0x6d2 <i2c_delay_T2>
	mov	r24,r23
 79a:	87 2f       	mov	r24, r23
	clr	r25
 79c:	99 27       	eor	r25, r25
	ret
 79e:	08 95       	ret

000007a0 <writePage64>:
#define Dev24C02  0xA0




void writePage64(unsigned char *dataArray){
 7a0:	df 93       	push	r29
 7a2:	cf 93       	push	r28
 7a4:	00 d0       	rcall	.+0      	; 0x7a6 <writePage64+0x6>
 7a6:	cd b7       	in	r28, 0x3d	; 61
 7a8:	de b7       	in	r29, 0x3e	; 62
 7aa:	9a 83       	std	Y+2, r25	; 0x02
 7ac:	89 83       	std	Y+1, r24	; 0x01
			i2c_stop();
		}
		else{
			goto metka;
		}		*/
		i2c_init();                             // initialize I2C library
 7ae:	99 df       	rcall	.-206    	; 0x6e2 <i2c_init>

		// write 0x75 to EEPROM address 5 (Byte Write) 
		i2c_start_wait(Dev24C02+I2C_WRITE);     // set device address and write mode
 7b0:	80 ea       	ldi	r24, 0xA0	; 160
 7b2:	aa df       	rcall	.-172    	; 0x708 <i2c_start_wait>
		
		i2c_write(0x05);                        // write address = 5
 7b4:	85 e0       	ldi	r24, 0x05	; 5
 7b6:	ba df       	rcall	.-140    	; 0x72c <i2c_write>
		i2c_write(0x75);                        // write value 0x75 to EEPROM
 7b8:	85 e7       	ldi	r24, 0x75	; 117
 7ba:	b8 df       	rcall	.-144    	; 0x72c <i2c_write>
		i2c_stop(); 
 7bc:	af df       	rcall	.-162    	; 0x71c <i2c_stop>
	
 7be:	0f 90       	pop	r0
 7c0:	0f 90       	pop	r0
 7c2:	cf 91       	pop	r28
 7c4:	df 91       	pop	r29
 7c6:	08 95       	ret

000007c8 <__vector_11>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	2f 93       	push	r18
 7d4:	8f 93       	push	r24
 7d6:	9f 93       	push	r25
 7d8:	ef 93       	push	r30
 7da:	ff 93       	push	r31
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	00 d0       	rcall	.+0      	; 0x7e2 <__vector_11+0x1a>
 7e2:	00 d0       	rcall	.+0      	; 0x7e4 <__vector_11+0x1c>
 7e4:	cd b7       	in	r28, 0x3d	; 61
 7e6:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 7e8:	8b e2       	ldi	r24, 0x2B	; 43
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	fc 01       	movw	r30, r24
 7ee:	80 81       	ld	r24, Z
 7f0:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
 7f2:	8c e2       	ldi	r24, 0x2C	; 44
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	fc 01       	movw	r30, r24
 7f8:	80 81       	ld	r24, Z
 7fa:	8b 83       	std	Y+3, r24	; 0x03
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 7fc:	8a 81       	ldd	r24, Y+2	; 0x02
 7fe:	88 71       	andi	r24, 0x18	; 24
 800:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 802:	80 91 aa 00 	lds	r24, 0x00AA
 806:	8f 5f       	subi	r24, 0xFF	; 255
 808:	8f 71       	andi	r24, 0x1F	; 31
 80a:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
 80c:	80 91 ab 00 	lds	r24, 0x00AB
 810:	9c 81       	ldd	r25, Y+4	; 0x04
 812:	98 17       	cp	r25, r24
 814:	19 f4       	brne	.+6      	; 0x81c <__vector_11+0x54>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 816:	82 e0       	ldi	r24, 0x02	; 2
 818:	89 83       	std	Y+1, r24	; 0x01
 81a:	0b c0       	rjmp	.+22     	; 0x832 <__vector_11+0x6a>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 81c:	8c 81       	ldd	r24, Y+4	; 0x04
 81e:	80 93 aa 00 	sts	0x00AA, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 822:	8c 81       	ldd	r24, Y+4	; 0x04
 824:	88 2f       	mov	r24, r24
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	88 57       	subi	r24, 0x78	; 120
 82a:	9f 4f       	sbci	r25, 0xFF	; 255
 82c:	2b 81       	ldd	r18, Y+3	; 0x03
 82e:	fc 01       	movw	r30, r24
 830:	20 83       	st	Z, r18
    }
    UART_LastRxError = lastRxError;  
 832:	89 81       	ldd	r24, Y+1	; 0x01
 834:	80 93 ac 00 	sts	0x00AC, r24
	//PORTB=0x2; 
}
 838:	24 96       	adiw	r28, 0x04	; 4
 83a:	de bf       	out	0x3e, r29	; 62
 83c:	cd bf       	out	0x3d, r28	; 61
 83e:	cf 91       	pop	r28
 840:	df 91       	pop	r29
 842:	ff 91       	pop	r31
 844:	ef 91       	pop	r30
 846:	9f 91       	pop	r25
 848:	8f 91       	pop	r24
 84a:	2f 91       	pop	r18
 84c:	0f 90       	pop	r0
 84e:	0f be       	out	0x3f, r0	; 63
 850:	0f 90       	pop	r0
 852:	1f 90       	pop	r1
 854:	18 95       	reti

00000856 <__vector_12>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 856:	1f 92       	push	r1
 858:	0f 92       	push	r0
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	0f 92       	push	r0
 85e:	11 24       	eor	r1, r1
 860:	2f 93       	push	r18
 862:	3f 93       	push	r19
 864:	8f 93       	push	r24
 866:	9f 93       	push	r25
 868:	ef 93       	push	r30
 86a:	ff 93       	push	r31
 86c:	df 93       	push	r29
 86e:	cf 93       	push	r28
 870:	0f 92       	push	r0
 872:	cd b7       	in	r28, 0x3d	; 61
 874:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 876:	90 91 a8 00 	lds	r25, 0x00A8
 87a:	80 91 a9 00 	lds	r24, 0x00A9
 87e:	98 17       	cp	r25, r24
 880:	a1 f0       	breq	.+40     	; 0x8aa <__vector_12+0x54>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 882:	80 91 a9 00 	lds	r24, 0x00A9
 886:	8f 5f       	subi	r24, 0xFF	; 255
 888:	8f 71       	andi	r24, 0x1F	; 31
 88a:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
 88c:	89 81       	ldd	r24, Y+1	; 0x01
 88e:	80 93 a9 00 	sts	0x00A9, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 892:	8c e2       	ldi	r24, 0x2C	; 44
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	29 81       	ldd	r18, Y+1	; 0x01
 898:	22 2f       	mov	r18, r18
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	28 59       	subi	r18, 0x98	; 152
 89e:	3f 4f       	sbci	r19, 0xFF	; 255
 8a0:	f9 01       	movw	r30, r18
 8a2:	20 81       	ld	r18, Z
 8a4:	fc 01       	movw	r30, r24
 8a6:	20 83       	st	Z, r18
 8a8:	09 c0       	rjmp	.+18     	; 0x8bc <__vector_12+0x66>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 8aa:	8a e2       	ldi	r24, 0x2A	; 42
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	2a e2       	ldi	r18, 0x2A	; 42
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	f9 01       	movw	r30, r18
 8b4:	20 81       	ld	r18, Z
 8b6:	2f 7d       	andi	r18, 0xDF	; 223
 8b8:	fc 01       	movw	r30, r24
 8ba:	20 83       	st	Z, r18
    }
	
	
}
 8bc:	0f 90       	pop	r0
 8be:	cf 91       	pop	r28
 8c0:	df 91       	pop	r29
 8c2:	ff 91       	pop	r31
 8c4:	ef 91       	pop	r30
 8c6:	9f 91       	pop	r25
 8c8:	8f 91       	pop	r24
 8ca:	3f 91       	pop	r19
 8cc:	2f 91       	pop	r18
 8ce:	0f 90       	pop	r0
 8d0:	0f be       	out	0x3f, r0	; 63
 8d2:	0f 90       	pop	r0
 8d4:	1f 90       	pop	r1
 8d6:	18 95       	reti

000008d8 <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
 8d8:	df 93       	push	r29
 8da:	cf 93       	push	r28
 8dc:	00 d0       	rcall	.+0      	; 0x8de <uart_init+0x6>
 8de:	cd b7       	in	r28, 0x3d	; 61
 8e0:	de b7       	in	r29, 0x3e	; 62
 8e2:	9a 83       	std	Y+2, r25	; 0x02
 8e4:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
 8e6:	10 92 a8 00 	sts	0x00A8, r1
    UART_TxTail = 0;
 8ea:	10 92 a9 00 	sts	0x00A9, r1
    UART_RxHead = 0;
 8ee:	10 92 aa 00 	sts	0x00AA, r1
    UART_RxTail = 0;
 8f2:	10 92 ab 00 	sts	0x00AB, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	9a 81       	ldd	r25, Y+2	; 0x02
 8fa:	99 23       	and	r25, r25
 8fc:	54 f4       	brge	.+20     	; 0x912 <uart_init+0x3a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 8fe:	8b e2       	ldi	r24, 0x2B	; 43
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	22 e0       	ldi	r18, 0x02	; 2
 904:	fc 01       	movw	r30, r24
 906:	20 83       	st	Z, r18
    	 baudrate &= ~0x8000;
 908:	89 81       	ldd	r24, Y+1	; 0x01
 90a:	9a 81       	ldd	r25, Y+2	; 0x02
 90c:	9f 77       	andi	r25, 0x7F	; 127
 90e:	9a 83       	std	Y+2, r25	; 0x02
 910:	89 83       	std	Y+1, r24	; 0x01
    }
    UBRRH = (unsigned char)(baudrate>>8);
 912:	80 e4       	ldi	r24, 0x40	; 64
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	29 81       	ldd	r18, Y+1	; 0x01
 918:	3a 81       	ldd	r19, Y+2	; 0x02
 91a:	23 2f       	mov	r18, r19
 91c:	33 27       	eor	r19, r19
 91e:	fc 01       	movw	r30, r24
 920:	20 83       	st	Z, r18
    UBRRL = (unsigned char) baudrate;
 922:	89 e2       	ldi	r24, 0x29	; 41
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	29 81       	ldd	r18, Y+1	; 0x01
 928:	fc 01       	movw	r30, r24
 92a:	20 83       	st	Z, r18
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 92c:	8a e2       	ldi	r24, 0x2A	; 42
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	28 e9       	ldi	r18, 0x98	; 152
 932:	fc 01       	movw	r30, r24
 934:	20 83       	st	Z, r18
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 936:	80 e4       	ldi	r24, 0x40	; 64
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	26 e8       	ldi	r18, 0x86	; 134
 93c:	fc 01       	movw	r30, r24
 93e:	20 83       	st	Z, r18
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 940:	0f 90       	pop	r0
 942:	0f 90       	pop	r0
 944:	cf 91       	pop	r28
 946:	df 91       	pop	r29
 948:	08 95       	ret

0000094a <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
 94a:	df 93       	push	r29
 94c:	cf 93       	push	r28
 94e:	00 d0       	rcall	.+0      	; 0x950 <uart_getc+0x6>
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 954:	90 91 aa 00 	lds	r25, 0x00AA
 958:	80 91 ab 00 	lds	r24, 0x00AB
 95c:	98 17       	cp	r25, r24
 95e:	19 f4       	brne	.+6      	; 0x966 <uart_getc+0x1c>
        return UART_NO_DATA;   /* no data available */
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	91 e0       	ldi	r25, 0x01	; 1
 964:	1b c0       	rjmp	.+54     	; 0x99c <uart_getc+0x52>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 966:	80 91 ab 00 	lds	r24, 0x00AB
 96a:	8f 5f       	subi	r24, 0xFF	; 255
 96c:	8f 71       	andi	r24, 0x1F	; 31
 96e:	89 83       	std	Y+1, r24	; 0x01
    UART_RxTail = tmptail; 
 970:	89 81       	ldd	r24, Y+1	; 0x01
 972:	80 93 ab 00 	sts	0x00AB, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 976:	89 81       	ldd	r24, Y+1	; 0x01
 978:	88 2f       	mov	r24, r24
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	88 57       	subi	r24, 0x78	; 120
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	fc 01       	movw	r30, r24
 982:	80 81       	ld	r24, Z
 984:	8a 83       	std	Y+2, r24	; 0x02
    
    return (UART_LastRxError << 8) + data;
 986:	80 91 ac 00 	lds	r24, 0x00AC
 98a:	88 2f       	mov	r24, r24
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	38 2f       	mov	r19, r24
 990:	22 27       	eor	r18, r18
 992:	8a 81       	ldd	r24, Y+2	; 0x02
 994:	88 2f       	mov	r24, r24
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	82 0f       	add	r24, r18
 99a:	93 1f       	adc	r25, r19

}/* uart_getc */
 99c:	0f 90       	pop	r0
 99e:	0f 90       	pop	r0
 9a0:	cf 91       	pop	r28
 9a2:	df 91       	pop	r29
 9a4:	08 95       	ret

000009a6 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
 9a6:	df 93       	push	r29
 9a8:	cf 93       	push	r28
 9aa:	00 d0       	rcall	.+0      	; 0x9ac <uart_putc+0x6>
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 9b2:	80 91 a8 00 	lds	r24, 0x00A8
 9b6:	8f 5f       	subi	r24, 0xFF	; 255
 9b8:	8f 71       	andi	r24, 0x1F	; 31
 9ba:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
 9bc:	00 00       	nop
 9be:	80 91 a9 00 	lds	r24, 0x00A9
 9c2:	99 81       	ldd	r25, Y+1	; 0x01
 9c4:	98 17       	cp	r25, r24
 9c6:	d9 f3       	breq	.-10     	; 0x9be <uart_putc+0x18>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 9c8:	89 81       	ldd	r24, Y+1	; 0x01
 9ca:	88 2f       	mov	r24, r24
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	88 59       	subi	r24, 0x98	; 152
 9d0:	9f 4f       	sbci	r25, 0xFF	; 255
 9d2:	2a 81       	ldd	r18, Y+2	; 0x02
 9d4:	fc 01       	movw	r30, r24
 9d6:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 9d8:	89 81       	ldd	r24, Y+1	; 0x01
 9da:	80 93 a8 00 	sts	0x00A8, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 9de:	8a e2       	ldi	r24, 0x2A	; 42
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	2a e2       	ldi	r18, 0x2A	; 42
 9e4:	30 e0       	ldi	r19, 0x00	; 0
 9e6:	f9 01       	movw	r30, r18
 9e8:	20 81       	ld	r18, Z
 9ea:	20 62       	ori	r18, 0x20	; 32
 9ec:	fc 01       	movw	r30, r24
 9ee:	20 83       	st	Z, r18

}/* uart_putc */
 9f0:	0f 90       	pop	r0
 9f2:	0f 90       	pop	r0
 9f4:	cf 91       	pop	r28
 9f6:	df 91       	pop	r29
 9f8:	08 95       	ret

000009fa <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 9fa:	df 93       	push	r29
 9fc:	cf 93       	push	r28
 9fe:	00 d0       	rcall	.+0      	; 0xa00 <uart_puts+0x6>
 a00:	cd b7       	in	r28, 0x3d	; 61
 a02:	de b7       	in	r29, 0x3e	; 62
 a04:	9a 83       	std	Y+2, r25	; 0x02
 a06:	89 83       	std	Y+1, r24	; 0x01
    while (*s) 
 a08:	0b c0       	rjmp	.+22     	; 0xa20 <uart_puts+0x26>
      uart_putc(*s++);
 a0a:	89 81       	ldd	r24, Y+1	; 0x01
 a0c:	9a 81       	ldd	r25, Y+2	; 0x02
 a0e:	fc 01       	movw	r30, r24
 a10:	20 81       	ld	r18, Z
 a12:	89 81       	ldd	r24, Y+1	; 0x01
 a14:	9a 81       	ldd	r25, Y+2	; 0x02
 a16:	01 96       	adiw	r24, 0x01	; 1
 a18:	9a 83       	std	Y+2, r25	; 0x02
 a1a:	89 83       	std	Y+1, r24	; 0x01
 a1c:	82 2f       	mov	r24, r18
 a1e:	c3 df       	rcall	.-122    	; 0x9a6 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	9a 81       	ldd	r25, Y+2	; 0x02
 a24:	fc 01       	movw	r30, r24
 a26:	80 81       	ld	r24, Z
 a28:	88 23       	and	r24, r24
 a2a:	79 f7       	brne	.-34     	; 0xa0a <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
 a2c:	0f 90       	pop	r0
 a2e:	0f 90       	pop	r0
 a30:	cf 91       	pop	r28
 a32:	df 91       	pop	r29
 a34:	08 95       	ret

00000a36 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
 a36:	1f 93       	push	r17
 a38:	df 93       	push	r29
 a3a:	cf 93       	push	r28
 a3c:	00 d0       	rcall	.+0      	; 0xa3e <uart_puts_p+0x8>
 a3e:	00 d0       	rcall	.+0      	; 0xa40 <uart_puts_p+0xa>
 a40:	0f 92       	push	r0
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
 a46:	9d 83       	std	Y+5, r25	; 0x05
 a48:	8c 83       	std	Y+4, r24	; 0x04
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 a4a:	02 c0       	rjmp	.+4      	; 0xa50 <uart_puts_p+0x1a>
      uart_putc(c);
 a4c:	81 2f       	mov	r24, r17
 a4e:	ab df       	rcall	.-170    	; 0x9a6 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 a50:	8c 81       	ldd	r24, Y+4	; 0x04
 a52:	9d 81       	ldd	r25, Y+5	; 0x05
 a54:	9a 83       	std	Y+2, r25	; 0x02
 a56:	89 83       	std	Y+1, r24	; 0x01
 a58:	8c 81       	ldd	r24, Y+4	; 0x04
 a5a:	9d 81       	ldd	r25, Y+5	; 0x05
 a5c:	01 96       	adiw	r24, 0x01	; 1
 a5e:	9d 83       	std	Y+5, r25	; 0x05
 a60:	8c 83       	std	Y+4, r24	; 0x04
 a62:	89 81       	ldd	r24, Y+1	; 0x01
 a64:	9a 81       	ldd	r25, Y+2	; 0x02
 a66:	fc 01       	movw	r30, r24
 a68:	14 91       	lpm	r17, Z+
 a6a:	1b 83       	std	Y+3, r17	; 0x03
 a6c:	8b 81       	ldd	r24, Y+3	; 0x03
 a6e:	18 2f       	mov	r17, r24
 a70:	11 23       	and	r17, r17
 a72:	61 f7       	brne	.-40     	; 0xa4c <uart_puts_p+0x16>
      uart_putc(c);

}/* uart_puts_p */
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	0f 90       	pop	r0
 a7a:	0f 90       	pop	r0
 a7c:	0f 90       	pop	r0
 a7e:	cf 91       	pop	r28
 a80:	df 91       	pop	r29
 a82:	1f 91       	pop	r17
 a84:	08 95       	ret

00000a86 <uart_available>:
Purpose:  Determine the number of bytes waiting in the receive buffer
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
 a86:	df 93       	push	r29
 a88:	cf 93       	push	r28
 a8a:	cd b7       	in	r28, 0x3d	; 61
 a8c:	de b7       	in	r29, 0x3e	; 62
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
 a8e:	80 91 aa 00 	lds	r24, 0x00AA
 a92:	88 2f       	mov	r24, r24
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	9c 01       	movw	r18, r24
 a98:	21 5e       	subi	r18, 0xE1	; 225
 a9a:	3f 4f       	sbci	r19, 0xFF	; 255
 a9c:	80 91 ab 00 	lds	r24, 0x00AB
 aa0:	88 2f       	mov	r24, r24
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	a9 01       	movw	r20, r18
 aa6:	48 1b       	sub	r20, r24
 aa8:	59 0b       	sbc	r21, r25
 aaa:	ca 01       	movw	r24, r20
 aac:	2f e1       	ldi	r18, 0x1F	; 31
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	b9 01       	movw	r22, r18
 ab2:	1c d0       	rcall	.+56     	; 0xaec <__divmodhi4>
}/* uart_available */
 ab4:	cf 91       	pop	r28
 ab6:	df 91       	pop	r29
 ab8:	08 95       	ret

00000aba <uart_flush>:
Purpose:  Flush bytes waiting the receive buffer.  Acutally ignores them.
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
 aba:	df 93       	push	r29
 abc:	cf 93       	push	r28
 abe:	cd b7       	in	r28, 0x3d	; 61
 ac0:	de b7       	in	r29, 0x3e	; 62
        UART_RxHead = UART_RxTail;
 ac2:	80 91 ab 00 	lds	r24, 0x00AB
 ac6:	80 93 aa 00 	sts	0x00AA, r24
}/* uart_flush */
 aca:	cf 91       	pop	r28
 acc:	df 91       	pop	r29
 ace:	08 95       	ret

00000ad0 <main>:

unsigned char transferData[7] = {1,1,1,1,1,1,1,1,1};


 int main(void)
 {
 ad0:	df 93       	push	r29
 ad2:	cf 93       	push	r28
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62
     unsigned char ret;
	 twi_init();
 ad8:	c2 da       	rcall	.-2684   	; 0x5e <twi_init>
	 
	 ee24cxxx_write_bytes(0,sizeof(transferData),transferData)	 ;
 ada:	20 e6       	ldi	r18, 0x60	; 96
 adc:	30 e0       	ldi	r19, 0x00	; 0
 ade:	80 e0       	ldi	r24, 0x00	; 0
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	67 e0       	ldi	r22, 0x07	; 7
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	a9 01       	movw	r20, r18
 ae8:	0f dc       	rcall	.-2018   	; 0x308 <ee24cxxx_write_bytes>
	 for(;;);
 aea:	ff cf       	rjmp	.-2      	; 0xaea <main+0x1a>

00000aec <__divmodhi4>:
 aec:	97 fb       	bst	r25, 7
 aee:	09 2e       	mov	r0, r25
 af0:	07 26       	eor	r0, r23
 af2:	0a d0       	rcall	.+20     	; 0xb08 <__divmodhi4_neg1>
 af4:	77 fd       	sbrc	r23, 7
 af6:	04 d0       	rcall	.+8      	; 0xb00 <__divmodhi4_neg2>
 af8:	0c d0       	rcall	.+24     	; 0xb12 <__udivmodhi4>
 afa:	06 d0       	rcall	.+12     	; 0xb08 <__divmodhi4_neg1>
 afc:	00 20       	and	r0, r0
 afe:	1a f4       	brpl	.+6      	; 0xb06 <__divmodhi4_exit>

00000b00 <__divmodhi4_neg2>:
 b00:	70 95       	com	r23
 b02:	61 95       	neg	r22
 b04:	7f 4f       	sbci	r23, 0xFF	; 255

00000b06 <__divmodhi4_exit>:
 b06:	08 95       	ret

00000b08 <__divmodhi4_neg1>:
 b08:	f6 f7       	brtc	.-4      	; 0xb06 <__divmodhi4_exit>
 b0a:	90 95       	com	r25
 b0c:	81 95       	neg	r24
 b0e:	9f 4f       	sbci	r25, 0xFF	; 255
 b10:	08 95       	ret

00000b12 <__udivmodhi4>:
 b12:	aa 1b       	sub	r26, r26
 b14:	bb 1b       	sub	r27, r27
 b16:	51 e1       	ldi	r21, 0x11	; 17
 b18:	07 c0       	rjmp	.+14     	; 0xb28 <__udivmodhi4_ep>

00000b1a <__udivmodhi4_loop>:
 b1a:	aa 1f       	adc	r26, r26
 b1c:	bb 1f       	adc	r27, r27
 b1e:	a6 17       	cp	r26, r22
 b20:	b7 07       	cpc	r27, r23
 b22:	10 f0       	brcs	.+4      	; 0xb28 <__udivmodhi4_ep>
 b24:	a6 1b       	sub	r26, r22
 b26:	b7 0b       	sbc	r27, r23

00000b28 <__udivmodhi4_ep>:
 b28:	88 1f       	adc	r24, r24
 b2a:	99 1f       	adc	r25, r25
 b2c:	5a 95       	dec	r21
 b2e:	a9 f7       	brne	.-22     	; 0xb1a <__udivmodhi4_loop>
 b30:	80 95       	com	r24
 b32:	90 95       	com	r25
 b34:	bc 01       	movw	r22, r24
 b36:	cd 01       	movw	r24, r26
 b38:	08 95       	ret

00000b3a <_exit>:
 b3a:	f8 94       	cli

00000b3c <__stop_program>:
 b3c:	ff cf       	rjmp	.-2      	; 0xb3c <__stop_program>
